//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#pragma once
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#include <Arduino.h>
#include "TinyVector.h"
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define _DEBUG // отладочный режим
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define SERIAL_SPEED 115200 // скорость работы с Serial
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define RTC_I2C 1 // номер I2C для часов реального времени (0 или 1)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// LoRa pins
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define LORA_CS_PIN 8
#define LORA_RESET_PIN 9 
#define LORA_IRQ_PIN 7
#define LORA_FREQ 868E6 // частота работы LoRa
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define LED_PIN  LED_BUILTIN
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define GPS_BAUD 9600 // скорость работы с портом GPS
#define GPS_SERIAL Serial1  // какой Serial используем для работы с GPS
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// SIM800
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define GSM_DEBUG_MODE // отладочный режим модуля SIM800
#define GSM_KNOWN_NUMBER F("79182900000") // известный номер телефона, на который модем может откликаться (например, в будущем чего-то делать)

#define GSM_SERIAL Serial2 // какой хардварный Serial будем использовать при работе с модемом?
#define GSM_BAUD_RATE 57600 // скорость работы с SIM800

#define GSM_AVAILABLE_CHECK_TIME 60000 // через сколько миллисекунд проверять доступность модема посылкой команды AT
#define GSM_WAIT_BOOT_TIME 1000 // сколько мс ждать загрузки модема
#define GSM_CHECK_REGISTRATION_INTERVAL 4567 // через сколько мс проверять регистрацию в сети (повторные вызовы с указанным промежутком до тех пор, пока модем не зарегистрируется)
#define GSM_REBOOT_TIME 2000 // сколько миллисекунд держать питание выключенным при перезагрузке модема, если он завис
#define GSM_WAIT_AFTER_REBOOT_TIME 1000 // сколько мс ждать после перезагрузки модема прежде, чем начать обрабатывать команды
#define GSM_MAX_ANSWER_TIME 60000 // через сколько мс, если не получен ответ на команду от модема, считать его зависшим

#define USE_GSM_REBOOT_PIN // использовать ли пин управления питанием модема?
#define GSM_REBOOT_PIN 36 // номер пина, на котором будет управление питанием GSM-модема (актуально при раскомментированной команде USE_GSM_REBOOT_PIN)
#define GSM_POWER_OFF LOW // уровень для выключения питания
#define GSM_POWER_ON HIGH // уровень для включения питания

#define GSM_PULL_GPRS_BY_PING // закомментировать, если не надо периодически пинговать выбранный хост (нужно, чтобы поддерживать GPRS-соединение при очень редких запросах в сеть)
#define GSM_PING_INTERVAL 45000 // интервал в миллисекундах для пинга
#define GSM_PING_HOST F("ya.ru") // хост, который пингуем


#define SIM800_STATUS_PIN A3 // пин STATUS
#define SIM800_GATE_KEY 27 // пин ключа питания для модема
#define SIM800_GATE_OFF HIGH // уровень выключения ключа
#define SIM800_GATE_ON LOW // уровень включения ключа

// раскомментировать, если нужно управление подачей питания на SIM800 (вход POWERKEY)
// при этом на нужный выход МК подаётся импульс нужного уровня нужной длительности
// для включения модема в работу
#define USE_SIM800_POWERKEY 
#define SIM800_POWERKEY_PIN 47 // номер пина, на котором будет импульс для включения модема в работу
#define SIM800_POWERKEY_PULSE_DURATION 800 // сколько миллисекунд держать импульс
#define SIM800_POWERKEY_OFF_LEVEL HIGH // начальный уровень на выходе POWERKEY
#define SIM800_POWERKEY_ON_LEVEL LOW // уровень, который держится нужное кол-во времени
#define SIM800_WAIT_POWERKEY_AFTER_POWER_ON 1000 // сколько миллисекунд ждать после подачи питания до подачи импульса POWERKEY


// Настройки индикации работы модема SIM800C трехцветным светодиодом
//#define COMMON_ANODE                                  // Если светодиод с общим катодом - раскомментировать
#define LED_RED      A0                                 // Индикация светодиодом RED
#define LED_BLUE     A1                                 // Индикация светодиодом BLUE
#define LED_GREEN    A2                                 // Индикация светодиодом GREEN

#define COLOR_NONE LOW, LOW, LOW                        // Отключить все светодиоды
#define COLOR_GREEN LOW, HIGH, LOW                      // Включить зеленый светодиод
#define COLOR_BLUE LOW, LOW, HIGH                       // Включить синий светодиод
#define COLOR_RED HIGH, LOW, LOW                        // Включить красный светодиод


//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// СЛУЖЕБКА !!!
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _DEBUG
  #define DBG(s) { Serial << (s); }
  #define DBGLN(s) { Serial << (s) << ENDL; }
#else
  #define DBG(s) (void) 0
  #define DBGLN(s) (void) 0
#endif
#define ENDL '\n'
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
template <typename T> inline Stream& operator << (Stream &s, T n) { s.print(n); return s; }
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define UNUSED(expr) do { (void)(expr); } while (0)
